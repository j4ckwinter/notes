# Diving Deeper into Components and React Internals

# Project Structure
As best practice we want to outsource of logic from the the app.js file. Best practice is to use as many functional 
components as possible.

# Class-based vs. Functional Components
It can be useful to keep a sepearation of stateful and stateless components.
Class-based:
- class X extends Component
- Access to state
- Lifecycle hooks
- Access state and props via "this"
- "this.state.X" and "this.props.X"

Functional:
- const X = props => {}
- Access to state (only since react 16.8 - react hooks)
- No access to lifecycle hooks
- Access props as an arguement
- "props.X!"

# Component Creation Lifecycle
List of lifecycle hooks we can add to any class-based component:
1. constructor(props)                               -> Can initialise state here, also need super keyword to initialise extendable Component
2. getDerivedStateFromProps(props, state)           -> static method, will return updated state
3. render()                                         -> our JSX
4. Render child components                          -> Will do the above for class-based components and initialise compoents
5. componentDidMount()                              -> Final method, where we can put a http request to get data

There are other hooks that are still supported but will likely be removed as some stage.

# Component Update Lifecycle
When props or state change (the two triggers). These lifecycle hooks are called:
1. getDerivedStateFromProps(props, state)           -> Sync local state
2. shouldComponentUpdate(nextProps, nextState)      -> Allows you to cancel updating processing, for performance (should be used carefully), prevent uneccessary update cycles
3. render()                                         -> Rerender
4. Update child components                          -> Same as above
5. getSnapshotBeforeUpdate(prevProps, prevState)    -> Last minute dom ops, can give you previous scrolling postion for example
6. componentDidUpdate()                             -> Signals now done, render has been executed, can make http request

!In class-based components props is accessed with the this keyword!

# Notes
webpack - toolkit used to compile JavaScript components into a single, loadable bundle
babel - write your JavaScript code using ES6 and compile it into ES5 to run in the browser

#State and props
State:
State is data that the component is expected to handle itself. It is also data that can fluctuate and change. To read 
the state, you use this.state. To update it, you use this.setState(). Every time this.setState() is called, React updates 
the state, calculates a diff between the previous state and the new state, and injects a set of changes to the DOM on 
the page. This results a fast and efficient updates to your UI.
Props:
Properties encompass data that is passed into the component. Properties do NOT change but are instead fixed values. 
To set them, you assign them to attributes when creating a new component.